import os
from typing import Optional
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from database.models import Product
from filters.chat_types import ChatTypeFilter
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Filter

from kbds import reply

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞
ADMIN_ID_ENV = os.getenv("ADMIN_ID")
ADMIN_ID: Optional[int] = int(ADMIN_ID_ENV) if ADMIN_ID_ENV and ADMIN_ID_ENV.isdigit() else None


# –§–∏–ª—å—Ç—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class IsAdmin(Filter):
    async def __call__(self, message: types.Message) -> bool:
        if message is None or message.from_user is None:
            return False  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ ‚Äî –Ω–µ –∞–¥–º–∏–Ω

        return message.from_user.id == ADMIN_ID


# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


class AddProduct(StatesGroup):
    # –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    name = State()
    description = State()
    price = State()
    image = State()

    product_for_change = None

    texts = {
        "AddProduct:name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:price": "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:",
        "AddProduct:image": "–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...",
    }


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
class OrderState(StatesGroup):
    name = State()
    description = State()
    price = State()
    contact_info = State()


# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.message(Command("admin"), IsAdmin())
async def admin_panel(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=reply.ADMIN_KB)


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
@admin_router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def create_order(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderState.name)


@admin_router.message(OrderState.name, F.text)
async def set_client_name(message: types.Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂):")
    await state.set_state(OrderState.description)


@admin_router.message(OrderState.description, F.text)
async def set_bot_purpose(message: types.Message, state: FSMContext):
    await state.update_data(bot_purpose=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(OrderState.price)


@admin_router.message(OrderState.price, F.text)
async def set_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, Telegram):")
    await state.set_state(OrderState.contact_info)


@admin_router.message(OrderState.contact_info, F.text)
async def set_contact_info(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    # print(data)
    new_product = Product(
        name=data.get('client_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
        description=data.get('bot_purpose'),
        price=float(data.get('budget', 0)),
        image=data.get("image", "default.jpg")
    )

    session.add(new_product)
    await session.flush()
    await session.commit()

    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
@admin_router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤")
async def view_orders(message: types.Message):
    await message.answer("üìã –ü–æ–∫–∞ —á—Ç–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")


@admin_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")
async def delete_order(message: types.Message):
    await message.answer('üîç –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ).')

# callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ inlain –∫–Ω–æ–ø–æ–∫.
from aiogram import types, Router, F
from filters.chat_types import ChatTypeFilter
from aiogram.types import FSInputFile, CallbackQuery, Message

# –∏–º–ø–æ—Ä—Ç –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import Order

# –∏–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∞
from dotenv import load_dotenv

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from text_message import text
from kbds import inline, reply

load_dotenv()


# –ü–æ–º–µ—â–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
inlain_logic_router = Router()
# –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç private —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö. –ï—Å–ª–∏ gropup —Ç–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –æ–±–∞ —Å—Ä–∞–∑—É.
inlain_logic_router.message.filter(ChatTypeFilter(["private"]))


class UserState(StatesGroup):
    platform = State()
    text_platform = State()
    bot_type = State()
    text_service = State()
    wishes = State()
    functional = State()
    name = State()
    contacts = State()


# _____________–•–µ–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–∫–∏ "–∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞"___________________
# –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
# –≠—Ç–æ callback-—Ö–µ–Ω–¥–ª–µ—Ä, –æ–Ω –ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Å callback_data, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ "platform_"
@inlain_logic_router.callback_query(F.data.startswith("platform"))
# callback: types.CallbackQuery ‚Äî –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
# state: FSMContext ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —à–∞–≥–∞–º–∏).
async def handle_platform_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ callback.data –Ω–µ –ø—É—Å—Ç–æ–µ.
    if not callback.data:
        return

    # –†–∞–∑–¥–µ–ª—è–µ—Ç callback_data="platform_telegram" –ø–æ "_" –∏ –±–µ—Ä—ë—Ç "telegram"
    platform_name = callback.data.split("_")[1]

    # –ï—Å–ª–∏ –∏–º—è –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏, –±–µ—Ä—ë–º –∏–∑ Telegram first_name
    if isinstance(callback.message, types.Message):
        # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç platform_name –≤ FSMContext, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.
        await state.update_data(platform=platform_name)
        # –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞.
        await state.set_state(UserState.bot_type)

        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {platform_name.capitalize()}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ ü§ñ:",
            reply_markup=inline.platform_services_kb,
        )
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (—Ç–µ–∫—Å—Ç)
@inlain_logic_router.message(UserState.platform, F.text)
async def handle_platform_text(message: types.Message, state: FSMContext):
    platform_name = message.text.strip()
    await state.update_data(platform=platform_name)
    await state.set_state(UserState.bot_type)

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {platform_name.capitalize()}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ ü§ñ:",
        reply_markup=inline.platform_services_kb,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∞)
@inlain_logic_router.callback_query(F.data.startswith("service_"))
async def handle_service_order(callback: types.CallbackQuery, state: FSMContext):
    bot_type = callback.data.split("_")[1]
    if isinstance(callback.message, types.Message):
        await state.update_data(bot_type=bot_type)
        await state.set_state(UserState.wishes)

        await callback.message.edit_text(
            text.selling_text_7, reply_markup=inline.inline_back_selection_2
        )
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –±–æ—Ç–∞ (—Ç–µ–∫—Å—Ç)
@inlain_logic_router.message(UserState.bot_type, F.text)
async def handle_service_text(message: types.Message, state: FSMContext):
    bot_type = message.text.strip()
    await state.update_data(bot_type=bot_type)
    await state.set_state(UserState.wishes)

    await message.answer(
        text.selling_text_7, reply_markup=inline.inline_back_selection_2
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç selling_text_9)
@inlain_logic_router.message(UserState.wishes, F.text)
async def handle_save_wishes(message: types.Message, state: FSMContext):
    await state.update_data(wishes=message.text)
    await state.set_state(UserState.functional)
    await message.answer(text.selling_text_9)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
@inlain_logic_router.message(UserState.functional, F.text)
async def handle_save_functional(message: types.Message, state: FSMContext):
    await state.update_data(functional=message.text)
    await state.set_state(UserState.name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è üìù:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@inlain_logic_router.message(UserState.name, F.text)
async def handle_save_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(UserState.contacts)
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (Telegram, WhatsApp) üìû:"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@inlain_logic_router.message(UserState.contacts, F.text)
async def handle_save_contacts(message: types.Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ ‚úÖ. –ù–∞–∂–º–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è! üöÄ",
        reply_markup=inline.inline_back_selection,
    )


# # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–∫–ø–∏ "–¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–æ—Ç–∞
# @inlain_logic_router.callback_query(F.data.startswith("text_service_other"))
# async def handle_text_service_order(callback: types.CallbackQuery, state: FSMContext):
#     if not callback.data:
#         return

#     wishes = callback.data.split("_")[1]
#     if isinstance(callback.message, types.Message):
#         await state.update_data(bot_type=wishes)
#         await callback.message.edit_text(
#             text.selling_text_7, reply_markup=inline.inline_back_selection
#         )
#         await state.set_state(OrderState.wishes)
#         await callback.answer()


@inlain_logic_router.callback_query(F.data == "arrange_order")
async def confirm_order(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession
):
    if isinstance(callback.message, types.Message):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª —Ä–∞–Ω–µ–µ
        data = await state.get_data()

        new_order = Order(
            user_id=callback.from_user.id,
            name=data.get("name"),
            platform=data.get("platform"),
            bot_type=data.get("bot_type"),
            wishes=data.get("wishes"),
            functional=data.get("functional"),
            contacts=data.get("contacts"),
        )

        session.add(new_order)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        order_info = (
            f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
            f"üë§ –ò–º—è: {data.get('name')}\n"
            f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data.get('platform')}\n"
            f"ü§ñ –¢–∏–ø –±–æ—Ç–∞: {data.get('bot_type')}\n"
            f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {data.get('wishes')}\n"
            f"üìù –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {data.get('functional')}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data.get('contacts')}\n"
            f"üîó ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
        GROUP_ID = -1002406768777
        if GROUP_ID:
            await callback.bot.send_message(
                str(GROUP_ID), order_info, parse_mode="Markdown"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫–∞–∑ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω
        await state.clear()
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
@inlain_logic_router.callback_query(F.data == "next_order")
async def handle_next_order(callback: types.CallbackQuery, state: FSMContext):
    if isinstance(callback.message, types.Message):
        await state.set_state(UserState.name)
        await callback.message.edit_text("–ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è üìù:")
        await callback.answer()


# @inlain_logic_router.callback_query(F.data.startswith("send_messag_2"))
# async def handle_send_message(callback: types.CallbackQuery, state: FSMContext):
#     if not callback.data:
#         return

#     if isinstance(callback.message, types.Message):
#         await state.set_state(UserState.name)
#         await state.update_data(UserState.wishes)
#         await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ ü§ñ:",
#                                          reply_markup=inline.platform_services_kb)


# # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–∫–ø–∏ "–¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–æ—Ç–∞
# @inlain_logic_router.callback_query(F.data.startswith("text_service_other"))
# async def handle_text_service_order(callback: types.CallbackQuery, state: FSMContext):
#     if isinstance(callback.message, types.Message):
#         await callback.message.edit_text(
#             text.selling_text_2, reply_markup=inline.inline_back_selection
#         )
#     await callback.answer()


# _____________________________–≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é_________________________________
@inlain_logic_router.callback_query(F.data == "inline_menu")
async def show_inline_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(
            text.information_inline_menu, reply_markup=inline.inline_options
        )
        await callback.answer()


# –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é
@inlain_logic_router.callback_query(F.data == "reply_menu")
async def show_reply_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/reply.webp")
        await callback.message.answer(
            text.information_reply_menu, reply_markup=reply.submenu_markup
        )
        await callback.message.answer_photo(photo)
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤—ã–±–æ—Ä –º–µ–Ω—é",
            reply_markup=inline.inline_menu_options,
        )
        await callback.answer()


# –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é
@inlain_logic_router.callback_query(F.data == "standard_back")
async def show_default_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/difolt_menu.webp")
        await callback.message.answer(text.information_difolt_menu)
        await callback.message.answer_photo(photo)
        await callback.answer()


# –≤–∞—Ä–∏–∞–Ω—Ç—ã inline –º–µ–Ω—é
# –•–µ–Ω–¥–ª–µ—Ä —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º(—Å—Å—ã–ª–∫–æ–π) –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≥—Ä—É–ø–ø—É –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç —Å—Å—ã–ª–∫–∏.
@inlain_logic_router.callback_query(F.data == "link_resource")
async def send_link(callback: CallbackQuery):
    if callback.message is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    group_link = "https://t.me/+DDiXtpAlb7AxZmIy"
    message_text = f"{text.sample_url_text}\n\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É]({group_link})"

    await callback.message.answer(
        message_text,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=inline.inline_back_1,  # –í–æ—Ç –∑–¥–µ—Å—å —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"


# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é:
# –•–µ–Ω–¥–ª–µ—Ä —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞–∫–∏–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ inline –∫–Ω–æ–ø–∫—É.
@inlain_logic_router.callback_query(F.data == "text_button")
async def handle_sample_text(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(
            text.sample_text, reply_markup=inline.inline_back_1
        )
        await callback.answer()


# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é. –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏.
@inlain_logic_router.callback_query(F.data == "image_button")
async def handle_sample_image(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/sample_image.webp")
        await callback.message.answer_photo(photo)
        await callback.message.answer(
            text.sample_image_text, reply_markup=inline.inline_back_1
        )
        await callback.answer()


# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é. –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏.
@inlain_logic_router.callback_query(F.data == "other_menu")
async def handle_sample_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –º–µ–Ω—é üßê –ò –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            reply_markup=inline.inline_menu_options,
        )
        await callback.answer()


# –ö–Ω–æ–ø–∫–∏ –ù–ê–ó–ê–î
# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é. –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ inline –º–µ–Ω—é.
@inlain_logic_router.callback_query(F.data == "back_to_menu")
async def handle_back_3(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/start_image_2.webp")
        await callback.message.answer_photo(
            photo,
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –º–µ–Ω—é üßê –ò –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            reply_markup=inline.inline_menu_options,
        )


@inlain_logic_router.callback_query(F.data == "back_menu")
async def handle_back_4(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(
            text.information_inline_menu, reply_markup=inline.inline_options
        )


@inlain_logic_router.callback_query(F.data == "back_main_menu_inline")
async def handle_back_main_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(
            "üìå –í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:",
            reply_markup=inline.inline_keyboard_main,
        )


# inline –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
# –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–∞–∫ –∂–µ –¥–ª—è reply, –¥—É–±–ª–∏—Ä—É–µ—Ç –µ—ë.
@inlain_logic_router.callback_query(F.data == "back_main_inlain")
async def back_to_main_inlain(callback: types.CallbackQuery):
    if isinstance(callback.message, types.Message):
        photo = FSInputFile("images/reply.webp")
        await callback.message.answer(
            text.selling_text_4, reply_markup=reply.submenu_markup
        )
        await callback.message.answer_photo(photo)
        await callback.answer()
        # # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # await callback.message.edit_text(
        #     "üìå –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –∏–∑—É—á–∞–µ—Ç–µ ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω—É–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ",
        #     reply_markup=inline.inline_keyboard_main
        # )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è inline –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
@inlain_logic_router.callback_query(F.data.in_(["arrange_back", "back_to_platforms"]))
async def back_to_platforms(callback: types.CallbackQuery):
    if isinstance(callback.message, types.Message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=inline.platform_kb
        )
    await callback.answer()


# # ____________________–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é___________________________
# @inlain_logic_router.callback_query(F.data == "main_variants")
# async def inline_menu_options(callback: types.CallbackQuery):
#     if isinstance(callback.message, types.Message):
#         photo = FSInputFile("images/start_image_2.webp")
#         await callback.message.answer_photo(
#             photo,
#             "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –º–µ–Ω—é üßê –ò –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
#             reply_markup=inline.inline_menu_options,
#         )


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# @inlain_logic_router.callback_query(F.data == "main_reviews")
# async def inline_main_menu_reviews(callback: types.CallbackQuery):
#     if isinstance(callback.message, types.Message):
#         photo = FSInputFile("images/review1.webp")
#         photo_2 = FSInputFile("images/review1.webp")
#         await callback.message.answer_photo(photo)
#         await callback.message.answer_photo(photo_2)
#         await callback.message.answer("üîπ –õ—É—á—à–∏–µ –æ—Ç–∑—ã–≤—ã –º–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. üìå –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#                                       reply_markup=inline.inline_keyboard_back_main_menu)


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# @inlain_logic_router.callback_query(F.data == "main_options")
# async def inline_main_menu_options_payment(callback: types.CallbackQuery):
#     if isinstance(callback.message, types.Message):
#         await callback.message.answer(text.selling_text, reply_markup=inline.inline_keyboard_back_main_menu)


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# @inlain_logic_router.callback_query(F.data == "main_cost_")
# async def inline_main_menu_cost(callback: types.CallbackQuery):
#     if isinstance(callback.message, types.Message):
#         await callback.message.answer(text.selling_text_3, reply_markup=inline.inline_keyboard_back_main_menu)

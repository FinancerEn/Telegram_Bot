from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command, or_f
from aiogram.types import FSInputFile
from text_message import text
# –ò–º–ø–æ—Ä—Ç Bold –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω—ã–º
from aiogram.utils.formatting import Bold
# –ò–º–ø–æ—Ä—Ç—ã 2 —à—Ç—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ handler_logic.py
# from kbds.inline import platform_kb
from filters.chat_types import ChatTypeFilter

from kbds import reply


# –ü–æ–º–µ—â–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
user_private_router = Router()
# –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç private —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö. –ï—Å–ª–∏ gropup —Ç–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –æ–±–∞ —Å—Ä–∞–∑—É.
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(text.selling_text_4, reply_markup=reply.submenu_markup)


@user_private_router.message(or_f(Command("menu"), F.text.casefold() == "–º–µ–Ω—é"))
async def menu_cmd(message: types.Message):
    photo = FSInputFile("images/start_image_2.webp")
    await message.answer_photo(photo, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–∏–∂–µ ‚ñ©üßê", reply_markup=reply.submenu_markup)


@user_private_router.message(F.text.casefold() == "–æ—Ç–∑—ã–≤—ã")
async def reviews(message: types.Message):
    texts = Bold("–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üòä")  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º
    await message.answer(texts.as_html(), parse_mode="HTML", reply_markup=reply.back_markup)

    photo = FSInputFile("images/review1.webp")
    photo_2 = FSInputFile("images/review1.webp")
    await message.answer_photo(photo)
    await message.answer_photo(photo_2)


@user_private_router.message(F.text.casefold() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")
async def payment_cmd(message: types.Message):
    await message.answer(text.selling_text, reply_markup=reply.back_markup)


@user_private_router.message(F.text.casefold() == "—Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def cost_cmd(message: types.Message):
    await message.answer(text.selling_text_3, reply_markup=reply.back_markup)


# __________________3 –º–µ–Ω—é, —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º__________________
@user_private_router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def handle_back_2(message: types.Message):
    await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=reply.submenu_markup)


# @user_private_router.callback_query(F.data.in_({
#     "platform_telegram",
#     "platform_instagram",
#     "platform_vk",
#     "platform_whatsapp",
#     "platform_other"
# }))
# async def handle_platform_callback(callback: types.CallbackQuery):
#     if callback.message:
#         await callback.message.answer(selling_text_2)
#     await callback.answer()


# # 1Ô∏è‚É£ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è callback-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ‚Üí @user_private_router.callback_query
# @user_private_router.callback_query()
# async def handle_telegram_callback(callback: types.CallbackQuery):
#     print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
#     if callback.data == "platform_telegram":
#         if callback.message:
#             await callback.message.answer(selling_text_2)
#         else:
#             await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")


# @user_private_router.callback_query(F.data == "platform_instagram")
# async def handle_instagram_callback(callback: types.CallbackQuery):
#     if callback.message:
#         await callback.message.answer(selling_text_2)
#     else:
#         await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")


# @user_private_router.callback_query(F.data == "platform_vk")
# async def handle_vk_callback(callback: types.CallbackQuery):
#     if callback.message:
#         await callback.message.answer(selling_text_2)
#     else:
#         await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")


# @user_private_router.callback_query(F.data == "platform_whatsapp")
# async def handle_Whatsapp_callback(callback: types.CallbackQuery):
#     if callback.message:
#         await callback.message.answer(selling_text_2)
#     else:
#         await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")


# @user_private_router.callback_query(F.data == "platform_other")
# async def handle_other_callback(callback: types.CallbackQuery):
#     if callback.message:
#         await callback.message.answer(selling_text_2)
#     else:
#         await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")


# @user_private_router.message(F.text)
# async def handle_user_text(message: types.Message):
#     if message.from_user:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ from_user –Ω–µ None
#         user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user_text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
#     if user_id in order_data:
#         order_data[user_id]["user_text"] = user_text
#         await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ú—ã –ø–æ–ª—É—á–∏–ª–∏: {user_text}")

#         # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#         del order_data[user_id]
#     else:
#         await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# # @user_private_router.message(lambda message: message.content_type == types.ContentType.TEXT)
# # async def echo(message: types.Message):
# #     text = message.text

# #     if text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ text –Ω–µ None
# #         if text.lower() in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', 'hi', 'hello', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ']:
# #             await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!')
# #         elif text.lower() in ['–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è', '–ø–æ–∫–∞', '–ø–∞–∫–µ–¥–∞', '–ø—Ä–æ—â–∞–π—Ç–µ']:
# #             await message.answer('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è')
# #         else:
# #             await message.answer(text)
# #     else:
# #         await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")

from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command, or_f
from aiogram.types import FSInputFile, CallbackQuery, Message
from text_message import text
# –ò–º–ø–æ—Ä—Ç Bold –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω—ã–º
from aiogram.utils.formatting import Bold
# –ò–º–ø–æ—Ä—Ç—ã 2 —à—Ç—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ handler_logic.py
# from kbds.inline import platform_kb
from filters.chat_types import ChatTypeFilter

from kbds import inline, reply


# –ü–æ–º–µ—â–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
user_private_router = Router()
# –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç private —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö. –ï—Å–ª–∏ gropup —Ç–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –æ–±–∞ —Å—Ä–∞–∑—É.
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: Message):
    photo = FSInputFile("images/reply.webp")
    await message.answer(text.selling_text_4, reply_markup=reply.submenu_markup)
    await message.answer_photo(photo)


@user_private_router.message(or_f(Command("menu"), F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é"))
async def menu_cmd(message: types.Message):
    photo = FSInputFile("images/start_image_2.webp")
    await message.answer_photo(photo, "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –º–µ–Ω—é üßê –ò –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                               reply_markup=inline.inline_menu_options)


@user_private_router.message(F.text.casefold() == "–æ—Ç–∑—ã–≤—ã")
async def reviews(message: types.Message):
    texts = Bold("–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üòä")  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º
    await message.answer(texts.as_html(), parse_mode="HTML", reply_markup=reply.back_markup)

    photo = FSInputFile("images/review1.webp")
    photo_2 = FSInputFile("images/review1.webp")
    await message.answer_photo(photo)
    await message.answer_photo(photo_2)


@user_private_router.message(F.text.casefold() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")
async def payment_cmd(message: types.Message):
    await message.answer(text.selling_text, reply_markup=inline.platform_kb)


@user_private_router.message(F.text.casefold() == "—Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def cost_cmd(message: types.Message):
    await message.answer(text.selling_text_3, reply_markup=reply.back_markup)


# –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é
@user_private_router.callback_query(F.data == "inline_menu")
async def show_inline_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(text.information_inline_menu, reply_markup=inline.inline_options)
        await callback.answer()


# –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é
@user_private_router.callback_query(F.data == "reply_menu")
async def show_reply_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/reply.webp")
        await callback.message.answer(text.information_reply_menu, reply_markup=reply.submenu_markup)
        await callback.message.answer_photo(photo)
        await callback.answer()


# –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é
@user_private_router.callback_query(F.data == "standard_back")
async def show_default_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/difolt_menu.webp")
        await callback.message.answer(text.information_difolt_menu)
        await callback.message.answer_photo(photo)
        await callback.answer()


# –≤–∞—Ä–∏–∞–Ω—Ç—ã inline –º–µ–Ω—é
# –•–µ–Ω–¥–ª–µ—Ä —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º(—Å—Å—ã–ª–∫–æ–π) –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≥—Ä—É–ø–ø—É –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç —Å—Å—ã–ª–∫–∏.
@user_private_router.callback_query(F.data == "link_resource")
async def send_link(callback: CallbackQuery):
    if callback.message is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    group_link = "https://t.me/+DDiXtpAlb7AxZmIy"
    message_text = f"{text.sample_url_text}\n\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É]({group_link})"

    await callback.message.answer(
        message_text,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=inline.inline_back_1  # –í–æ—Ç –∑–¥–µ—Å—å —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"


# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é:
# –•–µ–Ω–¥–ª–µ—Ä —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞–∫–∏–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ inline –∫–Ω–æ–ø–∫—É.
@user_private_router.callback_query(F.data == "text_button")
async def handle_sample_text(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(text.sample_text, reply_markup=inline.inline_back_1)
        await callback.answer()


# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é. –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏.
@user_private_router.callback_query(F.data == "image_button")
async def handle_sample_image(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/sample_image.webp")
        await callback.message.answer_photo(photo)
        await callback.message.answer(text.sample_image_text, reply_markup=inline.inline_back_1)
        await callback.answer()


# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é. –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏.
@user_private_router.callback_query(F.data == "other_menu")
async def handle_sample_menu(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –º–µ–Ω—é üßê –ò –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                                      reply_markup=inline.inline_menu_options)
        await callback.answer()


# __________________3 –º–µ–Ω—é, —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º__________________
@user_private_router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def handle_back_2(message: types.Message):
    await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=reply.submenu_markup)


# –í–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é. –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ inline –º–µ–Ω—é.
@user_private_router.callback_query(F.data == "back_to_menu")
async def handle_back_3(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        photo = FSInputFile("images/start_image_2.webp")
        await callback.message.answer_photo(photo, "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –º–µ–Ω—é üßê –ò –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                                            reply_markup=inline.inline_menu_options)


@user_private_router.callback_query(F.data == "back_menu")
async def handle_back_4(callback: CallbackQuery):
    if isinstance(callback.message, Message):
        await callback.message.answer(text.information_inline_menu, reply_markup=inline.inline_options)


# # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# # @user_private_router.message(lambda message: message.content_type == types.ContentType.TEXT)
# # async def echo(message: types.Message):
# #     text = message.text

# #     if text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ text –Ω–µ None
# #         if text.lower() in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', 'hi', 'hello', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ']:
# #             await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!')
# #         elif text.lower() in ['–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è', '–ø–æ–∫–∞', '–ø–∞–∫–µ–¥–∞', '–ø—Ä–æ—â–∞–π—Ç–µ']:
# #             await message.answer('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è')
# #         else:
# #             await message.answer(text)
# #     else:
# #         await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")

from aiogram import F, Router
from aiogram.filters import CommandStart, Command, or_f
from handlers.inlain_logic import UserState
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, Message
from filters.chat_types import ChatTypeFilter

# –ò–º–ø–æ—Ä—Ç Bold –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω—ã–º
from aiogram.utils.formatting import Bold

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ
from text_message import text
from kbds import inline, reply


# –ü–æ–º–µ—â–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.
user_private_router = Router()
# –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç private —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö. –ï—Å–ª–∏ gropup —Ç–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –æ–±–∞ —Å—Ä–∞–∑—É.
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = message.from_user.first_name if message.from_user else "–í—ã"
    photo = FSInputFile("images/reply.webp")
    await message.answer(f"{user_name}üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂.", reply_markup=reply.submenu_markup)
    await message.answer(text.selling_text_4, reply_markup=reply.submenu_markup)
    await message.answer_photo(photo)
    # –ß—Ç–æ –±—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—å inline –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∏–∂–µ.
    # await message.answer(
    #     "üìå –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –∏–∑—É—á–∞–µ—Ç–µ ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω—É–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ:",
    #     reply_markup=inline.inline_keyboard_main,
    # )


@user_private_router.message(or_f(Command("menu"), F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ–Ω—é"))
async def menu_cmd(message: Message):
    photo = FSInputFile("images/start_image_2.webp")
    await message.answer_photo(
        photo,
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –º–µ–Ω—é üßê –ò –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
        reply_markup=inline.inline_menu_options,
    )


@user_private_router.message(F.text.casefold() == "–∫–µ–π—Å—ã")
async def cases_other_reply(message: Message):
    await message.answer("–ü—Ä–∏–º–µ—Ä—ã –∫–µ–π—Å–æ–≤", reply_markup=reply.back_markup)
    await message.answer(text.cases_text, reply_markup=inline.platform_cases_kb)


@user_private_router.message(F.text.casefold() == "–æ—Ç–∑—ã–≤—ã")
async def reviews_reply(message: Message):
    texts = Bold("–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üòä")  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º
    await message.answer(
        texts.as_html(), parse_mode="HTML", reply_markup=reply.back_markup
    )

    photo = FSInputFile("images/review1.webp")
    photo_2 = FSInputFile("images/review1.webp")
    await message.answer_photo(photo)
    await message.answer_photo(photo_2)


@user_private_router.message(F.text.casefold() == "–æ–ø–ª–∞—Ç–∞")
async def payment_cmd(message: Message):
    await message.answer(text.payment_options_text, reply_markup=reply.submenu_markup)


@user_private_router.message(F.text.casefold() == "–∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –±–æ—Ç—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def cost_cmd(message: Message):
    texts = Bold("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –±–æ—Ç–∞ –∏ —É–∑–Ω–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å")
    await message.answer(
        texts.as_html(), parse_mode="HTML",
        reply_markup=inline.platform_services_price_kb)


@user_private_router.message(F.text.casefold() == "–∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞")
async def about_cmd(message: Message, state: FSMContext):
    await state.set_state(UserState.platform)
    # await message.answer(text.selling_text, reply_markup=reply.reply_markup)
    await message.answer(text.selling_text_8, reply_markup=inline.platform_kb)


# __________________3 –º–µ–Ω—é, —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º__________________
@user_private_router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def handle_back_2(message: Message):
    await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=reply.submenu_markup)


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@user_private_router.message(lambda message: message.text.lower() == "–Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_data = await state.get_data()
        prev_state = state_data.get("prev_state")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        if prev_state:
            await state.set_state(prev_state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.")
        else:
            await state.clear()  # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º FSM
            await message.answer("–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=reply.submenu_markup)
    else:
        await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=reply.submenu_markup)


# –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
@user_private_router.message(F.text.casefold() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def exit_order_process(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply.submenu_markup)

# # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# # @user_private_router.message(lambda message: message.content_type == types.ContentType.TEXT)
# # async def echo(message: Message):
# #     text = message.text

# #     if text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ text –Ω–µ None
# #         if text.lower() in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', 'hi', 'hello', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ']:
# #             await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!')
# #         elif text.lower() in ['–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è', '–ø–æ–∫–∞', '–ø–∞–∫–µ–¥–∞', '–ø—Ä–æ—â–∞–π—Ç–µ']:
# #             await message.answer('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è')
# #         else:
# #             await message.answer(text)
# #     else:
# #         await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
